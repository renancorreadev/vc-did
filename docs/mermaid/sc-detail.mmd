flowchart TD
    subgraph "🏛️ Ecossistema Smart Contract IDBraDIDRegistry"
        subgraph "📋 Contrato Principal"
            IDR["📋 IDBraDIDRegistry<br/>Endereço: 0x...<br/>Rede: Ethereum"]
        end

        subgraph "🆔 Funções de Gestão DID"
            F1["🔧 criarDID()<br/>• Registrar novo DID<br/>• Gerar documento DID<br/>• Emitir evento DIDCriado"]
            F2["📝 atualizarDocumentoDID()<br/>• Modificar documento<br/>• Validar permissões<br/>• Emitir evento DIDAtualizado"]
            F3["🔍 resolverDID()<br/>• Buscar documento<br/>• Retornar metadados<br/>• Verificar existência"]
            F4["❌ desativarDID()<br/>• Marcar como inativo<br/>• Revogar acesso<br/>• Emitir evento DIDDesativado"]
        end

        subgraph "📜 Funções de Credenciais"
            C1["✅ emitirCredencial()<br/>• Registrar hash SHA-256<br/>• Validar emissor autorizado<br/>• Emitir evento CredentialEmitida"]
            C2["❌ revogarCredencial()<br/>• Marcar como revogada<br/>• Registrar motivo<br/>• Emitir evento CredentialRevogada"]
            C3["🔄 restaurarCredencial()<br/>• Remover revogação<br/>• Validar permissões<br/>• Emitir evento CredentialRestaurada"]
            C4["🔍 verificarStatusCredencial()<br/>• Consultar se revogada<br/>• Retornar booleano<br/>• Acesso público"]
            C5["📋 obterDetalhesRevogacao()<br/>• Buscar registro completo<br/>• Retornar struct RevocationRecord<br/>• Incluir timestamp e motivo"]
        end

        subgraph "🔑 Funções de Atributos"
            A1["➕ adicionarAtributo()<br/>• Registrar novo atributo<br/>• Validar proprietário<br/>• Emitir evento AtributoAdicionado"]
            A2["❌ revogarAtributo()<br/>• Invalidar atributo<br/>• Registrar motivo<br/>• Emitir evento AtributoRevogado"]
            A3["✅ validarAtributo()<br/>• Verificar validade<br/>• Checar revogação<br/>• Retornar status"]
        end

        subgraph "👥 Funções de Controle de Acesso"
            R1["👑 concederPapelEmissor()<br/>• Adicionar emissor autorizado<br/>• Validar admin<br/>• Emitir evento PapelConcedido"]
            R2["❌ revogarPapelEmissor()<br/>• Remover autorização<br/>• Validar permissões<br/>• Emitir evento PapelRevogado"]
            R3["🔍 verificarPapelEmissor()<br/>• Consultar autorização<br/>• Retornar booleano<br/>• Acesso público"]
            R4["⚙️ configurarAdmin()<br/>• Definir administrador<br/>• Transferir propriedade<br/>• Emitir evento AdminAlterado"]
        end
    end

    subgraph "📊 Estruturas de Dados"
        subgraph "🆔 Documento DID"
            DD["📄 DocumentoDID<br/>• id: bytes32<br/>• documento: string (JSON)<br/>• proprietario: address<br/>• ativo: bool<br/>• timestampCriacao: uint256<br/>• timestampAtualizacao: uint256"]
        end

        subgraph "📜 Registro de Credencial"
            CR["📋 RegistroCredencial<br/>• hashCredencial: bytes32<br/>• emissor: address<br/>• portador: address<br/>• timestampEmissao: uint256<br/>• ativo: bool"]
        end

        subgraph "❌ Registro de Revogação"
            RR["📋 RegistroRevogacao<br/>• revogada: bool<br/>• timestamp: uint256<br/>• revogador: address<br/>• motivo: string<br/>• hashCredencial: bytes32"]
        end

        subgraph "🔑 Registro de Atributo"
            AR["📋 RegistroAtributo<br/>• nome: bytes32<br/>• valor: bytes<br/>• proprietario: address<br/>• valido: bool<br/>• timestampCriacao: uint256"]
        end
    end

    subgraph "📡 Eventos Emitidos"
        E1["📢 DIDCriado(bytes32 id, address proprietario)"]
        E2["📢 CredentialEmitida(bytes32 hash, address emissor)"]
        E3["📢 CredentialRevogada(bytes32 hash, string motivo)"]
        E4["📢 AtributoAdicionado(bytes32 nome, address proprietario)"]
        E5["📢 PapelConcedido(address emissor, address admin)"]
    end

    subgraph "🔒 Modificadores de Segurança"
        M1["🛡️ apenasEmissorAutorizado<br/>• Valida papel de emissor<br/>• Bloqueia não autorizados"]
        M2["🛡️ apenasProprietario<br/>• Valida propriedade DID<br/>• Controla acesso"]
        M3["🛡️ apenasAdmin<br/>• Valida papel admin<br/>• Funções administrativas"]
        M4["🛡️ didExiste<br/>• Verifica existência DID<br/>• Previne erros"]
    end

    %% Conexões entre funções e estruturas
    F1 --> DD
    F2 --> DD
    F3 --> DD

    C1 --> CR
    C2 --> RR
    C3 --> RR
    C4 --> RR
    C5 --> RR

    A1 --> AR
    A2 --> AR
    A3 --> AR

    %% Conexões com eventos
    F1 --> E1
    C1 --> E2
    C2 --> E3
    A1 --> E4
    R1 --> E5

    %% Conexões com modificadores
    C1 -.-> M1
    C2 -.-> M1
    F1 -.-> M2
    F2 -.-> M2
    R1 -.-> M3
    R4 -.-> M3
    F3 -.-> M4

    classDef contractStyle fill:#000,stroke:#fff,stroke-width:3px,color:#fff
    classDef didFunctionStyle fill:#1a1a2e,stroke:#fff,stroke-width:2px,color:#fff
    classDef credentialFunctionStyle fill:#16213e,stroke:#fff,stroke-width:2px,color:#fff
    classDef attributeFunctionStyle fill:#0f3460,stroke:#fff,stroke-width:2px,color:#fff
    classDef accessFunctionStyle fill:#533483,stroke:#fff,stroke-width:2px,color:#fff
    classDef dataStyle fill:#444,stroke:#fff,stroke-width:2px,color:#fff
    classDef eventStyle fill:#666,stroke:#fff,stroke-width:2px,color:#fff
    classDef modifierStyle fill:#888,stroke:#fff,stroke-width:2px,color:#fff

    class IDR contractStyle
    class F1,F2,F3,F4 didFunctionStyle
    class C1,C2,C3,C4,C5 credentialFunctionStyle
    class A1,A2,A3 attributeFunctionStyle
    class R1,R2,R3,R4 accessFunctionStyle
    class DD,CR,RR,AR dataStyle
    class E1,E2,E3,E4,E5 eventStyle
    class M1,M2,M3,M4 modifierStyle
