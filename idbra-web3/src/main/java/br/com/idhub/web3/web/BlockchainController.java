package br.com.idhub.web3.web;

import br.com.idhub.web3.service.BlockchainService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.web3j.protocol.core.methods.response.TransactionReceipt;

import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.CompletableFuture;
import java.util.Optional;

@RestController
@RequestMapping("/api/blockchain")
public class BlockchainController {

        @Autowired
        private BlockchainService blockchainService;

        // Endere√ßos hardcoded temporariamente
        private static final String DID_REGISTRY_ADDRESS = "0x34c2AcC42882C0279A64bB1a4B1083D483BdE886";

        // ========= ROLE MANAGEMENT =========

        @Operation(summary = "üîç Verificar Role de Issuer", description = """
                        Verifica se uma wallet possui ISSUER_ROLE nos contratos inteligentes.

                        **Funcionalidade**: Este endpoint √© usado para verificar se uma carteira blockchain tem permiss√£o para emitir credenciais verific√°veis.

                        **Uso**: Utilizado pelos servi√ßos issuer e verifier para validar autoriza√ß√µes antes de processar opera√ß√µes.

                        **Retorna**: Status do role, endere√ßo da wallet e timestamp da verifica√ß√£o.
                        """, tags = {
                        "üîê Role Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Role verificado com sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class), examples = @ExampleObject(name = "Resposta de Sucesso", summary = "Wallet com ISSUER_ROLE", value = """
                                        {
                                            "walletAddress": "0x1234567890abcdef1234567890abcdef12345678",
                                            "hasIssuerRole": true,
                                            "didRegistry": true,
                                            "timestamp": "2024-08-21T10:00:00",
                                            "message": "Wallet possui ISSUER_ROLE ativo"
                                        }
                                        """))),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro na verifica√ß√£o", content = @Content(mediaType = "application/json", examples = @ExampleObject(name = "Erro de Valida√ß√£o", summary = "Endere√ßo inv√°lido", value = """
                                        {
                                            "error": "Endere√ßo de wallet inv√°lido",
                                            "timestamp": "2024-08-21T10:00:00",
                                            "details": "Formato de endere√ßo Ethereum inv√°lido"
                                        }
                                        """)))
        })
        @GetMapping("/check-role/{walletAddress}")
        public ResponseEntity<Map<String, Object>> checkIssuerRole(
                        @Parameter(description = "Endere√ßo da wallet Ethereum (formato: 0x...)", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @PathVariable String walletAddress) {
                try {
                        boolean hasRole = blockchainService.hasIssuerRole(walletAddress);
                        Map<String, Object> response = Map.of(
                                        "walletAddress", walletAddress,
                                        "hasIssuerRole", hasRole,
                                        "didRegistry", blockchainService.hasIssuerRoleForContract(walletAddress,
                                                        blockchainService.getDidRegistryAddress()),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message",
                                        hasRole ? "Wallet possui ISSUER_ROLE ativo" : "Wallet n√£o possui ISSUER_ROLE");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        Map<String, Object> error = Map.of(
                                        "error", e.getMessage(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "walletAddress", walletAddress);
                        return ResponseEntity.badRequest().body(error);
                }
        }

        @Operation(summary = "üîê Verificar Role de Admin", description = """
                        Verifica se uma wallet possui DEFAULT_ADMIN_ROLE na blockchain.

                        **Funcionalidade**: Endpoint administrativo para verificar permiss√µes de administrador.

                        **Seguran√ßa**: Requer valida√ß√£o de chave administrativa para opera√ß√µes sens√≠veis.

                        **Uso**: Utilizado por administradores do sistema para gerenciar permiss√µes.
                        """, tags = { "üîê Role Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Role verificado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro na verifica√ß√£o")
        })
        @GetMapping("/check-admin-role/{walletAddress}")
        public ResponseEntity<Map<String, Object>> checkDefaultAdminRole(
                        @Parameter(description = "Endere√ßo da wallet Ethereum", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @PathVariable String walletAddress) {
                try {
                        boolean hasRole = blockchainService.hasDefaultAdminRole(walletAddress);
                        Map<String, Object> response = Map.of(
                                        "walletAddress", walletAddress,
                                        "hasDefaultAdminRole", hasRole,
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", hasRole ? "Wallet possui DEFAULT_ADMIN_ROLE"
                                                        : "Wallet n√£o possui DEFAULT_ADMIN_ROLE");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        Map<String, Object> error = Map.of(
                                        "error", e.getMessage(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "walletAddress", walletAddress);
                        return ResponseEntity.badRequest().body(error);
                }
        }

        @Operation(summary = "üîç Verificar Role Espec√≠fico", description = """
                        Verifica se uma wallet possui um role espec√≠fico na blockchain.

                        **Roles Dispon√≠veis**:
                        - `ISSUER_ROLE`: Permiss√£o para emitir credenciais
                        - `VERIFIER_ROLE`: Permiss√£o para verificar credenciais
                        - `HOLDER_ROLE`: Permiss√£o para armazenar credenciais
                        - `DEFAULT_ADMIN_ROLE`: Permiss√µes administrativas

                        **Uso**: Verifica√ß√£o flex√≠vel de qualquer role configurado no sistema.
                        """, tags = { "üîê Role Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Role verificado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro na verifica√ß√£o")
        })
        @GetMapping("/check-role/{role}/{walletAddress}")
        public ResponseEntity<Map<String, Object>> checkSpecificRole(
                        @Parameter(description = "Role a verificar", example = "ISSUER_ROLE", schema = @Schema(allowableValues = {
                                        "ISSUER_ROLE", "VERIFIER_ROLE", "HOLDER_ROLE",
                                        "DEFAULT_ADMIN_ROLE" }), required = true) @PathVariable String role,
                        @Parameter(description = "Endere√ßo da wallet", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @PathVariable String walletAddress) {
                try {
                        boolean hasRole = blockchainService.hasRole(role, walletAddress);
                        Map<String, Object> response = Map.of(
                                        "role", role,
                                        "walletAddress", walletAddress,
                                        "hasRole", hasRole,
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", hasRole ? "Wallet possui o role solicitado"
                                                        : "Wallet n√£o possui o role solicitado");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        Map<String, Object> error = Map.of(
                                        "error", e.getMessage(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "role", role,
                                        "walletAddress", walletAddress);
                        return ResponseEntity.badRequest().body(error);
                }
        }

        @Operation(summary = "‚úÖ Conceder Role", description = """
                        Concede um role espec√≠fico para uma wallet (requer chave administrativa).

                        **Seguran√ßa**: Opera√ß√£o administrativa que requer ADMIN_PRIVATE_KEY.

                        **Processo**:
                        1. Valida√ß√£o da chave administrativa
                        2. Verifica√ß√£o de permiss√µes
                        3. Execu√ß√£o da transa√ß√£o blockchain
                        4. Confirma√ß√£o da opera√ß√£o

                        **Roles Suportados**: ISSUER_ROLE, VERIFIER_ROLE, HOLDER_ROLE
                        """, tags = { "üîê Role Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Role concedido com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao conceder role")
        })
        @PostMapping("/grant-role/{role}/{walletAddress}")
        public ResponseEntity<Map<String, Object>> grantRole(
                        @Parameter(description = "Role a conceder", example = "ISSUER_ROLE", schema = @Schema(allowableValues = {
                                        "ISSUER_ROLE", "VERIFIER_ROLE",
                                        "HOLDER_ROLE" }), required = true) @PathVariable String role,
                        @Parameter(description = "Endere√ßo da wallet", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @PathVariable String walletAddress) {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.grantRole(role, walletAddress);
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "role", role,
                                        "walletAddress", walletAddress,
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", receipt.isStatusOK() ? "Role concedido com sucesso"
                                                        : "Falha na transa√ß√£o blockchain");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        Map<String, Object> error = Map.of(
                                        "success", false,
                                        "error", e.getMessage(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "role", role,
                                        "walletAddress", walletAddress);
                        return ResponseEntity.badRequest().body(error);
                }
        }

        @Operation(summary = "‚ùå Revogar Role", description = """
                        Revoga um role espec√≠fico de uma wallet (requer chave administrativa).

                        **Seguran√ßa**: Opera√ß√£o administrativa que requer ADMIN_PRIVATE_KEY.

                        **Impacto**: A wallet perder√° todas as permiss√µes associadas ao role revogado.

                        **Revers√£o**: O role pode ser re-concedido posteriormente se necess√°rio.
                        """, tags = { "üîê Role Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Role revogado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao revogar role")
        })
        @PostMapping("/revoke-role/{role}/{walletAddress}")
        public ResponseEntity<Map<String, Object>> revokeRole(
                        @Parameter(description = "Role a revogar", example = "ISSUER_ROLE", schema = @Schema(allowableValues = {
                                        "ISSUER_ROLE", "VERIFIER_ROLE",
                                        "HOLDER_ROLE" }), required = true) @PathVariable String role,
                        @Parameter(description = "Endere√ßo da wallet", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @PathVariable String walletAddress) {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.revokeRole(role,
                                        walletAddress);
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "role", role,
                                        "walletAddress", walletAddress,
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", receipt.isStatusOK() ? "Role revogado com sucesso"
                                                        : "Falha na transa√ß√£o blockchain");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        Map<String, Object> error = Map.of(
                                        "success", false,
                                        "error", e.getMessage(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "role", role,
                                        "walletAddress", walletAddress);
                        return ResponseEntity.badRequest().body(error);
                }
        }

        // ========= DID MANAGEMENT =========

        @Operation(summary = "üÜî Criar DID", description = """
                        Cria um novo DID (Decentralized Identifier) na blockchain.

                        **Funcionalidade**: Registra uma nova identidade descentralizada na rede Hyperledger Besu.

                        **Processo**:
                        1. Valida√ß√£o do formato do DID
                        2. Verifica√ß√£o de unicidade
                        3. Execu√ß√£o da transa√ß√£o blockchain
                        4. Confirma√ß√£o do registro

                        **Formato DID**: Segue o padr√£o W3C DID (ex: did:example:123)

                        **Seguran√ßa**: Requer ADMIN_PRIVATE_KEY para opera√ß√µes de cria√ß√£o.
                        """, tags = { "üÜî DID Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ DID criado com sucesso", content = @Content(mediaType = "application/json", examples = @ExampleObject(name = "DID Criado", summary = "Identidade registrada na blockchain", value = """
                                        {
                                            "success": true,
                                            "identity": "did:example:123",
                                            "transactionHash": "0xabc123...",
                                            "timestamp": "2024-08-21T10:00:00",
                                            "message": "DID criado e registrado na blockchain"
                                        }
                                        """))),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao criar DID")
        })
        @PostMapping("/did/create")
        public ResponseEntity<Map<String, Object>> createDID(
                        @Parameter(description = "Identidade do DID (formato: did:example:123)", example = "did:example:123", required = true) @RequestParam String identity,
                        @Parameter(description = "Documento DID em formato JSON (padr√£o W3C)", example = "{\"@context\": \"https://www.w3.org/ns/did/v1\", \"id\": \"did:example:123\"}", required = true) @RequestParam String didDocument) {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.createDID(identity,
                                        didDocument);
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "identity", identity,
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message",
                                        receipt.isStatusOK() ? "DID criado e registrado na blockchain"
                                                        : "Falha na cria√ß√£o do DID");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "identity", identity,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "üìù Atualizar Documento DID", description = """
                        Atualiza o documento DID de uma identidade existente.

                        **Funcionalidade**: Permite modificar informa√ß√µes de uma identidade j√° registrada.

                        **Valida√ß√µes**:
                        - DID deve existir na blockchain
                        - Formato do documento deve ser v√°lido
                        - Requer permiss√µes adequadas

                        **Uso**: Atualiza√ß√£o de informa√ß√µes pessoais, endere√ßos, chaves p√∫blicas, etc.
                        """, tags = { "üÜî DID Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ DID atualizado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao atualizar DID")
        })
        @PostMapping("/did/update")
        public ResponseEntity<Map<String, Object>> updateDIDDocument(
                        @Parameter(description = "Identidade do DID a atualizar", example = "did:example:123", required = true) @RequestParam String identity,
                        @Parameter(description = "Novo documento DID em formato JSON", example = "{\"@context\": \"https://www.w3.org/ns/did/v1\", \"id\": \"did:example:123\", \"updated\": true}", required = true) @RequestParam String newDidDocument) {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.updateDIDDocument(identity,
                                        newDidDocument);
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "identity", identity,
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", receipt.isStatusOK() ? "Documento DID atualizado com sucesso"
                                                        : "Falha na atualiza√ß√£o");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "identity", identity,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "üîç Verificar Exist√™ncia de DID", description = """
                        Verifica se um DID existe na blockchain.

                        **Funcionalidade**: Consulta r√°pida para verificar o status de registro de uma identidade.

                        **Retorna**: Boolean indicando se o DID est√° registrado.

                        **Uso**: Valida√ß√£o de identidades antes de opera√ß√µes, verifica√ß√£o de duplicatas.
                        """, tags = { "üÜî DID Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Verifica√ß√£o realizada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro na verifica√ß√£o")
        })
        @GetMapping("/did/exists/{identity}")
        public ResponseEntity<Map<String, Object>> checkDIDExists(
                        @Parameter(description = "Identidade do DID a verificar", example = "did:example:123", required = true) @PathVariable String identity) {
                try {
                        boolean exists = blockchainService.didExists(identity);
                        Map<String, Object> response = Map.of(
                                        "identity", identity,
                                        "exists", exists,
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message",
                                        exists ? "DID encontrado na blockchain" : "DID n√£o encontrado na blockchain");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "identity", identity,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "üìã Obter Informa√ß√µes da Identidade", description = """
                        Retorna informa√ß√µes completas de uma identidade DID.

                        **Funcionalidade**: Recupera todos os dados associados a uma identidade.

                        **Informa√ß√µes Retornadas**:
                        - Documento DID completo
                        - Atributos configurados
                        - Delegados ativos
                        - Status de valida√ß√£o
                        - Timestamps de cria√ß√£o/modifica√ß√£o

                        **Uso**: Consulta detalhada para aplica√ß√µes que precisam de informa√ß√µes completas da identidade.
                        """, tags = { "üÜî DID Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Informa√ß√µes obtidas com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao obter informa√ß√µes")
        })
        @GetMapping("/did/info/{identity}")
        public ResponseEntity<Map<String, Object>> getIdentityInfo(
                        @Parameter(description = "Identidade do DID", example = "did:example:123", required = true) @PathVariable String identity) {
                try {
                        Optional<Map<String, Object>> infoOpt = blockchainService.getIdentityInfo(identity);
                        if (infoOpt.isPresent()) {
                                Map<String, Object> info = infoOpt.get();
                                info.put("timestamp", java.time.LocalDateTime.now().toString());
                                info.put("message", "Informa√ß√µes da identidade recuperadas com sucesso");
                                return ResponseEntity.ok(info);
                        } else {
                                return ResponseEntity.badRequest().body(Map.of(
                                                "error", "Identidade n√£o encontrada",
                                                "identity", identity,
                                                "timestamp", java.time.LocalDateTime.now().toString()));
                        }
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "identity", identity,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        // ========= DELEGATE MANAGEMENT =========

        @Operation(summary = "üë• Adicionar Delegate", description = """
                        Adiciona um delegate para uma identidade.

                        **Funcionalidade**: Permite que uma identidade designe representantes para opera√ß√µes espec√≠ficas.

                        **Tipos de Delegate**:
                        - `SIGNER`: Pode assinar em nome da identidade
                        - `VERIFIER`: Pode verificar credenciais
                        - `ISSUER`: Pode emitir credenciais

                        **Validade**: O delegate tem um per√≠odo de validade configur√°vel em segundos.

                        **Seguran√ßa**: Requer permiss√µes adequadas da identidade principal.
                        """, tags = {
                        "üë• Delegate Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Delegate adicionado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao adicionar delegate")
        })
        @PostMapping("/delegate/add")
        public ResponseEntity<Map<String, Object>> addDelegate(
                        @Parameter(description = "Identidade que est√° adicionando o delegate", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @RequestParam String identity,
                        @Parameter(description = "Tipo do delegate", example = "SIGNER", schema = @Schema(allowableValues = {
                                        "SIGNER", "VERIFIER",
                                        "ISSUER" }), required = true) @RequestParam String delegateType,
                        @Parameter(description = "Endere√ßo do delegate", example = "0xabcdef1234567890abcdef1234567890abcdef12", required = true) @RequestParam String delegate,
                        @Parameter(description = "Validade em segundos (86400 = 24 horas)", example = "86400", required = true) @RequestParam Long validity) {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.addDelegate(identity,
                                        delegateType,
                                        delegate, validity);
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "identity", identity,
                                        "delegateType", delegateType,
                                        "delegate", delegate,
                                        "validity", validity,
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message",
                                        receipt.isStatusOK() ? "Delegate adicionado com sucesso"
                                                        : "Falha ao adicionar delegate");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "identity", identity,
                                        "delegateType", delegateType,
                                        "delegate", delegate,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "‚ùå Revogar Delegate", description = """
                        Revoga um delegate de uma identidade.

                        **Funcionalidade**: Remove as permiss√µes de um representante designado.

                        **Impacto**: O delegate perder√° todas as permiss√µes associadas ao tipo revogado.

                        **Seguran√ßa**: Apenas a identidade principal pode revogar seus pr√≥prios delegates.

                        **Revers√£o**: O delegate pode ser re-adicionado posteriormente se necess√°rio.
                        """, tags = { "üë• Delegate Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Delegate revogado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao revogar delegate")
        })
        @PostMapping("/delegate/revoke")
        public ResponseEntity<Map<String, Object>> revokeDelegate(
                        @Parameter(description = "Identidade que est√° revogando o delegate", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @RequestParam String identity,
                        @Parameter(description = "Tipo do delegate a revogar", example = "SIGNER", schema = @Schema(allowableValues = {
                                        "SIGNER", "VERIFIER",
                                        "ISSUER" }), required = true) @RequestParam String delegateType,
                        @Parameter(description = "Endere√ßo do delegate a revogar", example = "0xabcdef1234567890abcdef1234567890abcdef12", required = true) @RequestParam String delegate) {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.revokeDelegate(identity,
                                        delegateType,
                                        delegate);
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "identity", identity,
                                        "delegateType", delegateType,
                                        "delegate", delegate,
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", receipt.isStatusOK() ? "Delegate revogado com sucesso"
                                                        : "Falha ao revogar delegate");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "identity", identity,
                                        "delegateType", delegateType,
                                        "delegate", delegate,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "üîç Verificar Delegate V√°lido", description = """
                        Verifica se um delegate √© v√°lido para uma identidade.

                        **Funcionalidade**: Valida se um representante ainda possui permiss√µes ativas.

                        **Verifica√ß√µes**:
                        - Exist√™ncia do delegate
                        - Validade temporal
                        - Tipo de permiss√£o
                        - Status ativo

                        **Uso**: Valida√ß√£o antes de permitir opera√ß√µes por delegates.
                        """, tags = { "üë• Delegate Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Verifica√ß√£o realizada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro na verifica√ß√£o")
        })
        @GetMapping("/delegate/valid/{identity}/{delegateType}/{delegate}")
        public ResponseEntity<Map<String, Object>> checkValidDelegate(
                        @Parameter(description = "Identidade principal", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @PathVariable String identity,
                        @Parameter(description = "Tipo do delegate", example = "SIGNER", schema = @Schema(allowableValues = {
                                        "SIGNER", "VERIFIER",
                                        "ISSUER" }), required = true) @PathVariable String delegateType,
                        @Parameter(description = "Endere√ßo do delegate", example = "0xabcdef1234567890abcdef1234567890abcdef12", required = true) @PathVariable String delegate) {
                try {
                        boolean isValid = blockchainService.validDelegate(identity, delegateType, delegate);
                        Map<String, Object> response = Map.of(
                                        "identity", identity,
                                        "delegateType", delegateType,
                                        "delegate", delegate,
                                        "isValid", isValid,
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message",
                                        isValid ? "Delegate √© v√°lido e ativo" : "Delegate n√£o √© v√°lido ou expirou");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "identity", identity,
                                        "delegateType", delegateType,
                                        "delegate", delegate,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        // ========= ATTRIBUTE MANAGEMENT =========

        @Operation(summary = "üîß Definir Atributo", description = """
                        Define um atributo para uma identidade.

                        **Funcionalidade**: Permite associar dados espec√≠ficos a uma identidade DID.

                        **Tipos de Atributos**:
                        - Informa√ß√µes pessoais (nome, email, etc.)
                        - Dados de valida√ß√£o (KYC, documentos)
                        - Metadados customizados

                        **Validade**: O atributo tem um per√≠odo de validade configur√°vel.
                        """, tags = { "üîß Attribute Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Atributo definido com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao definir atributo")
        })
        @PostMapping("/attribute/set")
        public ResponseEntity<Map<String, Object>> setAttribute(
                        @Parameter(description = "Identidade da wallet", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @RequestParam String identity,
                        @Parameter(description = "Nome do atributo", example = "NAME", required = true) @RequestParam String name,
                        @Parameter(description = "Valor do atributo", example = "John Doe", required = true) @RequestParam String value,
                        @Parameter(description = "Validade em segundos (86400 = 24 horas)", example = "86400", required = true) @RequestParam Long validity) {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.setAttribute(identity, name,
                                        value,
                                        validity);
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "identity", identity,
                                        "name", name,
                                        "value", value,
                                        "validity", validity,
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", receipt.isStatusOK() ? "Atributo definido com sucesso"
                                                        : "Falha ao definir atributo");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "identity", identity,
                                        "name", name,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "‚ùå Revogar Atributo", description = """
                        Revoga um atributo de uma identidade.

                        **Funcionalidade**: Remove um atributo previamente definido.

                        **Impacto**: O atributo ser√° marcado como inv√°lido.

                        **Seguran√ßa**: Apenas a identidade principal pode revogar seus atributos.
                        """, tags = { "üîß Attribute Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Atributo revogado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao revogar atributo")
        })
        @PostMapping("/attribute/revoke")
        public ResponseEntity<Map<String, Object>> revokeAttribute(
                        @Parameter(description = "Identidade da wallet", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @RequestParam String identity,
                        @Parameter(description = "Nome do atributo", example = "NAME", required = true) @RequestParam String name,
                        @Parameter(description = "Valor do atributo", example = "John Doe", required = true) @RequestParam String value) {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.revokeAttribute(identity, name,
                                        value);
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "identity", identity,
                                        "name", name,
                                        "value", value,
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", receipt.isStatusOK() ? "Atributo revogado com sucesso"
                                                        : "Falha ao revogar atributo");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "identity", identity,
                                        "name", name,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        // ========= CREDENTIAL MANAGEMENT =========

        @Operation(summary = "üìú Emitir Credencial", description = """
                        Emite uma nova credencial para uma identidade.

                        **Funcionalidade**: Cria e registra uma credencial verific√°vel na blockchain.

                        **Processo**:
                        1. Valida√ß√£o da identidade
                        2. Gera√ß√£o do hash da credencial
                        3. Registro na blockchain
                        4. Confirma√ß√£o da emiss√£o

                        **Seguran√ßa**: Requer permiss√µes de ISSUER_ROLE.
                        """, tags = { "üìú Credential Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Credencial emitida com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao emitir credencial")
        })
        @PostMapping("/credential/issue")
        public ResponseEntity<Map<String, Object>> issueCredential(
                        @Parameter(description = "ID √∫nico da credencial", example = "cred_123", required = true) @RequestParam String credentialId,
                        @Parameter(description = "Sujeito da credencial (wallet address)", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @RequestParam String subject,
                        @Parameter(description = "Hash da credencial", example = "0xabc123...", required = true) @RequestParam String credentialHash) {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.issueCredential(credentialId,
                                        subject,
                                        credentialHash);
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "credentialId", credentialId,
                                        "subject", subject,
                                        "credentialHash", credentialHash,
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", receipt.isStatusOK() ? "Credencial emitida com sucesso"
                                                        : "Falha na emiss√£o da credencial");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "credentialId", credentialId,
                                        "subject", subject,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "‚ùå Revogar Credencial", description = """
                        Revoga uma credencial existente.

                        **Funcionalidade**: Marca uma credencial como revogada na blockchain.

                        **Impacto**: A credencial n√£o poder√° mais ser usada para verifica√ß√£o.

                        **Revers√£o**: Pode ser restaurada posteriormente se necess√°rio.
                        """, tags = { "üìú Credential Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Credencial revogada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao revogar credencial")
        })
        @PostMapping("/credential/revoke")
        public ResponseEntity<Map<String, Object>> revokeCredential(
                        @Parameter(description = "ID da credencial", example = "cred_123", required = true) @RequestParam String credentialId,
                        @Parameter(description = "Sujeito da credencial", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @RequestParam String subject,
                        @Parameter(description = "Motivo da revoga√ß√£o", example = "Credencial expirada", required = true) @RequestParam String reason) {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.revokeCredential(credentialId,
                                        subject,
                                        reason);
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "credentialId", credentialId,
                                        "subject", subject,
                                        "reason", reason,
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", receipt.isStatusOK() ? "Credencial revogada com sucesso"
                                                        : "Falha na revoga√ß√£o da credencial");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "credentialId", credentialId,
                                        "subject", subject,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "üîÑ Restaurar Credencial", description = """
                        Restaura uma credencial revogada.

                        **Funcionalidade**: Remove o status de revoga√ß√£o de uma credencial.

                        **Uso**: Corre√ß√£o de revoga√ß√µes incorretas ou restaura√ß√£o de credenciais v√°lidas.

                        **Seguran√ßa**: Requer permiss√µes adequadas para restaura√ß√£o.
                        """, tags = { "üìú Credential Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Credencial restaurada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao restaurar credencial")
        })
        @PostMapping("/credential/restore")
        public ResponseEntity<Map<String, Object>> restoreCredential(
                        @Parameter(description = "ID da credencial", example = "cred_123", required = true) @RequestParam String credentialId,
                        @Parameter(description = "Sujeito da credencial", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @RequestParam String subject,
                        @Parameter(description = "Motivo da restaura√ß√£o", example = "Erro na revoga√ß√£o", required = true) @RequestParam String reason) {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.restoreCredential(credentialId,
                                        subject,
                                        reason);
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "credentialId", credentialId,
                                        "subject", subject,
                                        "reason", reason,
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", receipt.isStatusOK() ? "Credencial restaurada com sucesso"
                                                        : "Falha na restaura√ß√£o da credencial");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "credentialId", credentialId,
                                        "subject", subject,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "üîç Verificar Revoga√ß√£o de Credencial", description = """
                        Verifica se uma credencial est√° revogada.

                        **Funcionalidade**: Consulta o status de revoga√ß√£o na blockchain.

                        **Retorna**: Boolean indicando se a credencial est√° revogada.

                        **Uso**: Valida√ß√£o antes de aceitar credenciais para verifica√ß√£o.
                        """, tags = { "üìú Credential Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Verifica√ß√£o realizada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro na verifica√ß√£o")
        })
        @GetMapping("/credential/revoked/{credentialId}")
        public ResponseEntity<Map<String, Object>> isCredentialRevoked(
                        @Parameter(description = "ID da credencial", example = "cred_123", required = true) @PathVariable String credentialId) {
                try {
                        boolean isRevoked = blockchainService.isCredentialRevoked(credentialId);
                        Map<String, Object> response = Map.of(
                                        "credentialId", credentialId,
                                        "isRevoked", isRevoked,
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", isRevoked ? "Credencial est√° revogada" : "Credencial est√° ativa");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "credentialId", credentialId,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "Obter Informa√ß√µes da Credencial", description = "Retorna informa√ß√µes de revoga√ß√£o de uma credencial")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Informa√ß√µes obtidas com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Erro ao obter informa√ß√µes")
        })
        @GetMapping("/credential/info/{credentialId}")
        public ResponseEntity<Map<String, Object>> getCredentialRevocation(
                        @Parameter(description = "ID da credencial", example = "cred_123") @PathVariable String credentialId) {
                try {
                        Optional<Map<String, Object>> infoOpt = blockchainService.getCredentialRevocation(credentialId);
                        if (infoOpt.isPresent()) {
                                return ResponseEntity.ok(infoOpt.get());
                        } else {
                                return ResponseEntity.badRequest().body(Map.of("error", "Credencial n√£o encontrada"));
                        }
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
                }
        }

        @Operation(summary = "Obter Credenciais da Identidade", description = "Retorna todas as credenciais de uma identidade")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Credenciais obtidas com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Erro ao obter credenciais")
        })
        @GetMapping("/credential/identity/{identity}")
        public ResponseEntity<Map<String, Object>> getIdentityCredentials(
                        @Parameter(description = "Identidade", example = "0x1234567890abcdef") @PathVariable String identity) {
                try {
                        Map<String, Object> credentials = blockchainService.getIdentityCredentials(identity);
                        return ResponseEntity.ok(credentials);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
                }
        }

        // ========= KYC MANAGEMENT =========

        @Operation(summary = "üîç Verificar Status KYC", description = """
                        Verifica o status de KYC de uma identidade.

                        **Funcionalidade**: Consulta o status de verifica√ß√£o de identidade na blockchain.

                        **Status Poss√≠veis**:
                        - `PENDING`: Aguardando verifica√ß√£o
                        - `APPROVED`: Aprovado
                        - `REJECTED`: Rejeitado
                        - `EXPIRED`: Expirado

                        **Uso**: Valida√ß√£o de identidades antes de opera√ß√µes sens√≠veis.
                        """, tags = { "üîç KYC Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Status KYC verificado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro na verifica√ß√£o")
        })
        @GetMapping("/kyc/{identity}")
        public ResponseEntity<Map<String, Object>> checkKYCStatus(
                        @Parameter(description = "Identidade da wallet", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @PathVariable String identity) {
                try {
                        boolean kycStatus = blockchainService.getKYCStatus(identity);
                        Map<String, Object> response = Map.of(
                                        "identity", identity,
                                        "kycStatus", kycStatus,
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", kycStatus ? "KYC aprovado" : "KYC n√£o aprovado ou pendente");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "identity", identity,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "‚úÖ Definir Status KYC", description = """
                        Define o status de KYC para uma identidade (requer chave administrativa).

                        **Funcionalidade**: Atualiza o status de verifica√ß√£o de identidade.

                        **Seguran√ßa**: Opera√ß√£o administrativa que requer ADMIN_PRIVATE_KEY.

                        **Status Suportados**: PENDING, APPROVED, REJECTED, EXPIRED
                        """, tags = { "üîç KYC Management" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Status KYC definido com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao definir status KYC")
        })
        @PostMapping("/kyc/{identity}")
        public ResponseEntity<Map<String, Object>> setKYCStatus(
                        @Parameter(description = "Identidade da wallet", example = "0x1234567890abcdef1234567890abcdef12345678", required = true) @PathVariable String identity,
                        @Parameter(description = "Status KYC a definir", example = "true", required = true) @RequestParam boolean verified) {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.setKYCStatus(identity,
                                        verified);
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "identity", identity,
                                        "kycStatus", verified,
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", receipt.isStatusOK() ? "Status KYC definido com sucesso"
                                                        : "Falha ao definir status KYC");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "identity", identity,
                                        "verified", verified,
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        // ========= SYSTEM CONTROL =========

        @Operation(summary = "‚è∏Ô∏è Pausar Contrato", description = """
                        Pausa o contrato inteligente (requer chave administrativa).

                        **Funcionalidade**: Pausa todas as opera√ß√µes do contrato DID.

                        **Seguran√ßa**: Opera√ß√£o administrativa que requer ADMIN_PRIVATE_KEY.

                        **Impacto**: Nenhuma opera√ß√£o poder√° ser executada at√© o contrato ser despausado.

                        **Uso**: Emerg√™ncias, manuten√ß√£o ou pausas programadas.
                        """, tags = { "‚öôÔ∏è System Control" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Contrato pausado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao pausar contrato")
        })
        @PostMapping("/pause")
        public ResponseEntity<Map<String, Object>> pauseContract() {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.pause();
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", receipt.isStatusOK() ? "Contrato pausado com sucesso"
                                                        : "Falha ao pausar contrato");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "‚ñ∂Ô∏è Despausar Contrato", description = """
                        Despausa o contrato inteligente (requer chave administrativa).

                        **Funcionalidade**: Retoma todas as opera√ß√µes do contrato DID.

                        **Seguran√ßa**: Opera√ß√£o administrativa que requer ADMIN_PRIVATE_KEY.

                        **Impacto**: Todas as opera√ß√µes voltam a funcionar normalmente.

                        **Uso**: Ap√≥s manuten√ß√£o ou pausas programadas.
                        """, tags = { "‚öôÔ∏è System Control" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Contrato despausado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao despausar contrato")
        })
        @PostMapping("/unpause")
        public ResponseEntity<Map<String, Object>> unpauseContract() {
                try {
                        CompletableFuture<TransactionReceipt> future = blockchainService.unpause();
                        TransactionReceipt receipt = future.get();

                        Map<String, Object> response = Map.of(
                                        "success", receipt.isStatusOK(),
                                        "transactionHash", receipt.getTransactionHash(),
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", receipt.isStatusOK() ? "Contrato despausado com sucesso"
                                                        : "Falha ao despausar contrato");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "üîç Verificar Status de Pausa", description = """
                        Verifica se o contrato est√° pausado.

                        **Funcionalidade**: Consulta o status de pausa do contrato.

                        **Retorna**: Boolean indicando se o contrato est√° pausado.

                        **Uso**: Verifica√ß√£o antes de executar opera√ß√µes cr√≠ticas.
                        """, tags = { "‚öôÔ∏è System Control" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Status verificado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro na verifica√ß√£o")
        })
        @GetMapping("/paused")
        public ResponseEntity<Map<String, Object>> isContractPaused() {
                try {
                        boolean isPaused = blockchainService.isPaused();
                        Map<String, Object> response = Map.of(
                                        "isPaused", isPaused,
                                        "timestamp", java.time.LocalDateTime.now().toString(),
                                        "message", isPaused ? "Contrato est√° pausado" : "Contrato est√° ativo");
                        return ResponseEntity.ok(response);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        // ========= STATUS & METRICS =========

        @Operation(summary = "üåê Status da Blockchain", description = """
                        Retorna o status atual da conex√£o com a blockchain Besu.

                        **Funcionalidade**: Health check da infraestrutura blockchain.

                        **Informa√ß√µes Retornadas**:
                        - Status da conex√£o
                        - Vers√£o da rede
                        - √öltimo bloco processado
                        - Lat√™ncia da conex√£o

                        **Uso**: Monitoramento e diagn√≥stico da infraestrutura.
                        """, tags = { "üìä Metrics & Monitoring" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ Status obtido com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao obter status")
        })
        @GetMapping("/status")
        public ResponseEntity<Map<String, Object>> getBlockchainStatus() {
                try {
                        Map<String, Object> status = new HashMap<>(Map.of(
                                        "status", "CONNECTED",
                                        "network", "Besu Consortium",
                                        "chainId", "1337",
                                        "rpcUrl", "http://144.22.179.183",
                                        "gasPrice", "0",
                                        "mode", "LEGACY",
                                        "contracts", Map.of("didRegistry", DID_REGISTRY_ADDRESS)));
                        status.put("timestamp", java.time.LocalDateTime.now().toString());
                        status.put("message", "Status da blockchain obtido com sucesso");
                        return ResponseEntity.ok(status);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "üìä M√©tricas do Sistema", description = """
                        Retorna m√©tricas e estat√≠sticas do sistema blockchain.

                        **Funcionalidade**: Coleta de dados de performance e uso.

                        **M√©tricas Inclu√≠das**:
                        - Total de DIDs registrados
                        - Total de credenciais emitidas
                        - Total de credenciais revogadas
                        - Total de opera√ß√µes realizadas

                        **Uso**: An√°lise de performance e planejamento de capacidade.
                        """, tags = { "üìä Metrics & Monitoring" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ M√©tricas obtidas com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao obter m√©tricas")
        })
        @GetMapping("/metrics")
        public ResponseEntity<Map<String, Object>> getSystemMetrics() {
                try {
                        Map<String, Object> metrics = new HashMap<>(blockchainService.getSystemMetrics());
                        metrics.put("timestamp", java.time.LocalDateTime.now().toString());
                        metrics.put("message", "M√©tricas do sistema obtidas com sucesso");
                        return ResponseEntity.ok(metrics);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }

        @Operation(summary = "üìà M√©tricas Espec√≠ficas", description = """
                        Retorna m√©tricas espec√≠ficas do contrato.

                        **Funcionalidade**: Consulta m√©tricas detalhadas por categoria.

                        **Tipos de M√©tricas**:
                        - DIDs por per√≠odo
                        - Credenciais por status
                        - Opera√ß√µes por tipo
                        - Performance por intervalo

                        **Uso**: An√°lise detalhada e relat√≥rios espec√≠ficos.
                        """, tags = { "üìä Metrics & Monitoring" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "‚úÖ M√©tricas espec√≠ficas obtidas com sucesso"),
                        @ApiResponse(responseCode = "400", description = "‚ùå Erro ao obter m√©tricas espec√≠ficas")
        })
        @GetMapping("/metrics/specific")
        public ResponseEntity<Map<String, Object>> getSpecificMetrics() {
                try {
                        Map<String, Object> metrics = new HashMap<>(Map.of(
                                        "totalDIDs", blockchainService.getTotalDIDs(),
                                        "totalCredentials", blockchainService.getTotalCredentials(),
                                        "totalRevokedCredentials", blockchainService.getTotalRevokedCredentials(),
                                        "totalOperations", blockchainService.getTotalOperations()));
                        metrics.put("timestamp", java.time.LocalDateTime.now().toString());
                        metrics.put("message", "M√©tricas espec√≠ficas obtidas com sucesso");
                        return ResponseEntity.ok(metrics);
                } catch (Exception e) {
                        return ResponseEntity.badRequest().body(Map.of(
                                        "error", e.getMessage(),
                                        "timestamp", java.time.LocalDateTime.now().toString()));
                }
        }
}
